CREATE TABLE STUDENT (
    RollNo CHAR(6),
    StudentName VARCHAR(20),
    Course VARCHAR(10),
    DOB DATE,
    PRIMARY KEY (RollNo)
);
 
CREATE TABLE SOCIETY (
    SocID CHAR(6),
    SocName VARCHAR(20),
    MentorName VARCHAR(15),
    Date DATE,
    TotalSeats UNSIGNED INT,
    PRIMARY KEY (SocID)
);
 
CREATE TABLE ENROLLMENT (
    RollNo CHAR(6),
    SID CHAR(6),
    DateOfEnrollment DATE,
    FOREIGN KEY (RollNo) REFERENCES STUDENT(RollNo),
    FOREIGN KEY (SID) REFERENCES SOCIETY(SocID),
    PRIMARY KEY (RollNo, SID)
);
 
 
1. Retrieve names of students enrolled in any society.
 
SELECT DISTINCT S.StudentName
FROM STUDENT S
JOIN ENROLLMENT E ON S.RollNo = E.RollNo;
 
2. Retrieve all society names.
 
SELECT SocName 
FROM SOCIETY;
 
 
3. Retrieve students' names starting with letter ‘A’.
 
SELECT StudentName 
FROM STUDENT 
WHERE StudentName LIKE 'A%';
 
 
4. Retrieve students' details studying in courses ‘computer science’ or ‘chemistry’.
 
SELECT StudentName, Course 
FROM STUDENT 
WHERE Course IN ('computer science', 'chemistry');
 
 
5. Retrieve students’ names whose roll no either starts with ‘X’ or ‘Z’ and ends with ‘9’
 
SELECT StudentName
FROM STUDENT
WHERE (RollNo LIKE 'X%' OR RollNo LIKE 'Z%') AND RollNo LIKE '%9';
 
 
6. Find society details with more than N TotalSeats where N is to be input by the user
 
SET @N := 40;
 
SELECT SocName, TotalSeats, (TotalSeats - COUNT(ENROLLMENT.RollNo)) AS VacantSeats
FROM SOCIETY
LEFT JOIN ENROLLMENT ON SOCIETY.SocID = ENROLLMENT.SID
GROUP BY SOCIETY.SocID
HAVING TotalSeats > @N;
 
 
7. Update society table for mentor name of a specific society
 
UPDATE SOCIETY
SET MentorName = 'Ram'
WHERE SocIname = 'NSS';
 
 
8. Find society names in which more than five students have enrolled
 
SELECT SocName
FROM SOCIETY
JOIN ENROLLMENT ON SOCIETY.SocID = ENROLLMENT.SID
GROUP BY SocName
HAVING COUNT(*) > 5;
 
 
8. Find society names in which more than five students have enrolled
 
SELECT SocName
FROM SOCIETY
JOIN ENROLLMENT ON SOCIETY.SocID = ENROLLMENT.SID
GROUP BY SocName
HAVING COUNT(*) > 5;
 
 
9. Find the name of youngest student enrolled in society ‘NSS’
 
SELECT StudentName
FROM STUDENT
JOIN ENROLLMENT ON STUDENT.RollNo = ENROLLMENT.RollNo
JOIN SOCIETY ON ENROLLMENT.SID = SOCIETY.SocID
WHERE SOCIETY.SocName = 'NSS'
ORDER BY DOB ASC
LIMIT 1;
 
10. Find the name of most popular society (on the basis of enrolled students)
 
SELECT SocName
FROM SOCIETY
JOIN ENROLLMENT ON SOCIETY.SocID = ENROLLMENT.SID
GROUP BY SocName
ORDER BY COUNT(*) DESC
LIMIT 1;
 
 
11. Find the name of two least popular societies (on the basis of enrolled students)
 
SELECT SocName
FROM SOCIETY
JOIN ENROLLMENT ON SOCIETY.SocID = ENROLLMENT.SID
GROUP BY SocName
ORDER BY COUNT(*) ASC
LIMIT 2;
 
 
12. Find the student names who are not enrolled in any society
 
SELECT StudentName
FROM STUDENT
WHERE RollNo NOT IN (SELECT RollNo FROM ENROLLMENT);
 
 
13. Find the student names enrolled in at least two societies
 
SELECT StudentName
FROM STUDENT
JOIN ENROLLMENT ON STUDENT.RollNo = ENROLLMENT.RollNo
GROUP BY StudentName
HAVING COUNT(DISTINCT ENROLLMENT.SID) >= 2;
 
 
14. Find society names in which maximum students are enrolled
 
SELECT SocName
FROM SOCIETY
JOIN ENROLLMENT ON SOCIETY.SocID = ENROLLMENT.SID
GROUP BY SocName
ORDER BY COUNT(*) DESC
LIMIT 1;
 
 
15. Find names of all students who have enrolled in any society and society names in which at 
least one student has enrolled 
 
SELECT DISTINCT StudentName, SocName
FROM STUDENT
JOIN ENROLLMENT ON STUDENT.RollNo = ENROLLMENT.RollNo
JOIN SOCIETY ON ENROLLMENT.SID = SOCIETY.SocID;
 
 
16. Find names of students who are enrolled in any of the three societies ‘Debating’, ‘Dancing’ 
and ‘Sashakt’.
 
SELECT DISTINCT StudentName
FROM STUDENT
JOIN ENROLLMENT ON STUDENT.RollNo = ENROLLMENT.RollNo
JOIN SOCIETY ON ENROLLMENT.SID = SOCIETY.SocID
WHERE SOCIETY.SocName IN ('Debating', 'Dancing', 'Sashakt');
 
 
17. Find society names such that its mentor has a name with ‘Gupta’ in it. 
 
SELECT SocName
FROM SOCIETY
WHERE MentorName LIKE '%Gupta%';
 
 
18. Find the society names in which the number of enrolled students is only 10% of its 
capacity.
 
SELECT SocName
FROM (
    SELECT SID, COUNT(*) AS EnrolledCount
    FROM ENROLLMENT
    GROUP BY SID
) AS EnrolledCountPerSociety
JOIN SOCIETY ON EnrolledCountPerSociety.SID = SOCIETY.SocID
WHERE EnrolledCount <= 0.1 * TotalSeats;
 
 
19. Display the vacant seats for each society.
 
SELECT SocName, TotalSeats - COUNT(ENROLLMENT.RollNo) AS VacantSeats
FROM SOCIETY
LEFT JOIN ENROLLMENT ON SOCIETY.SocID = ENROLLMENT.SID
GROUP BY SOCIETY.SocID;
 
 
20. Increment Total Seats of each society by 10%
 
UPDATE SOCIETY
SET TotalSeats = TotalSeats * 1.1;
 
 
21. Add the enrollment fees paid (‘yes’/’No’) field in the enrollment table.
 
ALTER TABLE ENROLLMENT
ADD EnrollmentFees ENUM('yes', 'no') DEFAULT 'no';
 
 
22. Update date of enrollment of society id ‘s1’ to ‘2018-01-15’, ‘s2’ to current date and ‘s3’ 
to ‘2018-01-02’.
 
UPDATE ENROLLMENT
SET DateOfEnrollment =
    CASE
        WHEN SID = 's1' THEN '2018-01-15'
        WHEN SID = 's2' THEN CURDATE()
        WHEN SID = 's3' THEN '2018-01-02'
    END;
 
 
23. Create a view to keep track of society names with the total number of students enrolled in 
it.
 
CREATE VIEW SocietyEnrollmentCount AS
SELECT SOCIETY.SocName, COUNT(ENROLLMENT.RollNo) AS TotalEnrolled
FROM SOCIETY
LEFT JOIN ENROLLMENT ON SOCIETY.SocID = ENROLLMENT.SID
GROUP BY SOCIETY.SocName;
 
 
 
24. Find student names enrolled in all the societies.
 
SELECT S.StudentName
FROM STUDENT S
WHERE NOT EXISTS (
    SELECT 1
    FROM SOCIETYENROLLMENTCOUNT SEC
    WHERE SEC.SocName NOT IN (
        SELECT SOCNAME
        FROM ENROLLMENT E
        JOIN SOCIETY S ON E.SID = S.SocID
        WHERE E.RollNo = S.RollNo
    )
);
 
 
25. Count the number of societies with more than 5 students enrolled in it(VIEW CREATION AND THEN QUERY--->)
 
SELECT COUNT(*) AS NumSocieties
FROM SocietyEnrollmentCount
WHERE TotalEnrolled > 5;
 
 
26. Add column Mobile number in student table with default value ‘9999999999’
 
ALTER TABLE STUDENT
ADD MobileNumber CHAR(10) DEFAULT '9999999999';
 
 
27. Find the total number of students whose age is > 20 years.
 
SELECT COUNT(*) AS NumStudents
FROM STUDENT
WHERE TIMESTAMPDIFF(YEAR, DOB, CURDATE()) > 20;
 
28. Find names of students who are born in 2001 and are enrolled in at least one society.
 
SELECT DISTINCT StudentName
FROM STUDENT
WHERE YEAR(DOB) = 2001 
AND 
RollNo IN (SELECT RollNo FROM ENROLLMENT);
 
29. Count all societies whose name starts with ‘S’ and ends with ‘t’ and at least 5 students are 
enrolled in the society.
 
SELECT COUNT(*) AS NumSocieties
FROM SOCIETY
WHERE SocName LIKE 'S%t' AND TotalEnrolled >= 5;
 
 
30. Display the following information: Society name Mentor name Total Capacity Total Enrolled Unfilled Seats 

SELECT SocName AS 'Society Name',
    MentorName AS 'Mentor Name',
    TotalSeats AS 'Total Capacity',
    TotalEnrolled AS 'Total Enrolled',
    (TotalSeats - TotalEnrolled) AS 'Unfilled Seats'
FROM SocietyEnrollmentCount;


CREATE TABLE EMPLOYEE
( Fname           VARCHAR(15)   NOT NULL,
  Minit           CHAR,
  Lname           VARCHAR(15)      NOT NULL,
  Ssn             CHAR(9)          NOT NULL,
  Bdate           DATE,
  Address         VARCHAR(30),
  Sex             CHAR(1),
  Salary          DECIMAL(10,2),
  Super_ssn       CHAR(9),
  Dno             INT               NOT NULL,
PRIMARY KEY   (Ssn));
 
 
CREATE TABLE DEPARTMENT
( Dname           VARCHAR(15)       NOT NULL,
  Dnumber         INT               NOT NULL,
  Mgr_ssn         CHAR(9)           NOT NULL,
  Mgr_start_date  DATE,
PRIMARY KEY (Dnumber),
UNIQUE      (Dname),
FOREIGN KEY (Mgr_ssn) REFERENCES EMPLOYEE(Ssn) );
 
CREATE TABLE DEPT_LOCATIONS
( Dnumber         INT               NOT NULL,
  Dlocation       VARCHAR(15)       NOT NULL,
PRIMARY KEY (Dnumber, Dlocation),
FOREIGN KEY (Dnumber) REFERENCES DEPARTMENT(Dnumber) );
 
CREATE TABLE PROJECT
( Pname           VARCHAR(15)       NOT NULL,
  Pnumber         INT               NOT NULL,
  Plocation       VARCHAR(15),
  Dnum            INT               NOT NULL,
PRIMARY KEY (Pnumber),
UNIQUE      (Pname),
FOREIGN KEY (Dnum) REFERENCES DEPARTMENT(Dnumber) );
 
CREATE TABLE WORKS_ON
( Essn            CHAR(9)           NOT NULL,
  Pno             INT               NOT NULL,
  Hours           DECIMAL(3,1)      NOT NULL,
PRIMARY KEY (Essn, Pno),
FOREIGN KEY (Essn) REFERENCES EMPLOYEE(Ssn),
FOREIGN KEY (Pno) REFERENCES PROJECT(Pnumber) );
 
CREATE TABLE DEPENDENT
( Essn            CHAR(9)           NOT NULL,
  Dependent_name  VARCHAR(15)       NOT NULL,
  Sex             CHAR,
  Bdate           DATE,
  Relationship    VARCHAR(8),
PRIMARY KEY (Essn, Dependent_name),
FOREIGN KEY (Essn) REFERENCES EMPLOYEE(Ssn) );
 
INSERT INTO EMPLOYEE
VALUES      ('John','B','Smith',123456789,'1965-01-09','731 Fondren, Houston TX','M',30000,333445555,5),
            ('Franklin','T','Wong',333445555,'1965-12-08','638 Voss, Houston TX','M',40000,888665555,5),
            ('Alicia','J','Zelaya',999887777,'1968-01-19','3321 Castle, Spring TX','F',25000,987654321,4),
            ('Jennifer','S','Wallace',987654321,'1941-06-20','291 Berry, Bellaire TX','F',43000,888665555,4),
            ('Ramesh','K','Narayan',666884444,'1962-09-15','975 Fire Oak, Humble TX','M',38000,333445555,5),
            ('Joyce','A','English',453453453,'1972-07-31','5631 Rice, Houston TX','F',25000,333445555,5),
            ('Ahmad','V','Jabbar',987987987,'1969-03-29','980 Dallas, Houston TX','M',25000,987654321,4),
            ('James','E','Borg',888665555,'1937-11-10','450 Stone, Houston TX','M',55000,null,1);
 
INSERT INTO DEPARTMENT
VALUES      ('Research',5,333445555,'1988-05-22'),
            ('Administration',4,987654321,'1995-01-01'),
            ('Headquarters',1,888665555,'1981-06-19');
 
INSERT INTO PROJECT
VALUES      ('ProductX',1,'Bellaire',5),
            ('ProductY',2,'Sugarland',5),
            ('ProductZ',3,'Houston',5),
            ('Computerization',10,'Stafford',4),
            ('Reorganization',20,'Houston',1),
            ('Newbenefits',30,'Stafford',4);
 
INSERT INTO WORKS_ON
VALUES     (123456789,1,32.5),
           (123456789,2,7.5),
           (666884444,3,40.0),
           (453453453,1,20.0),
           (453453453,2,20.0),
           (333445555,2,10.0),
           (333445555,3,10.0),
           (333445555,10,10.0),
           (333445555,20,10.0),
           (999887777,30,30.0),
           (999887777,10,10.0),
           (987987987,10,35.0),
           (987987987,30,5.0),
           (987654321,30,20.0),
           (987654321,20,15.0),
           (888665555,20,16.0);
 
INSERT INTO DEPENDENT
VALUES      (333445555,'Alice','F','1986-04-04','Daughter'),
            (333445555,'Theodore','M','1983-10-25','Son'),
            (333445555,'Joy','F','1958-05-03','Spouse'),
            (987654321,'Abner','M','1942-02-28','Spouse'),
            (123456789,'Michael','M','1988-01-04','Son'),
            (123456789,'Alice','F','1988-12-30','Daughter'),
            (123456789,'Elizabeth','F','1967-05-05','Spouse');
 
INSERT INTO DEPT_LOCATIONS
VALUES      (1,'Houston'),
            (4,'Stafford'),
            (5,'Bellaire'),
            (5,'Sugarland'),
            (5,'Houston');
 
--------------------X----------------------------QUERIES--------------------------X---------------------------------------
 
Query 0. Retrieve the birth date and address of the employee(s) whose name is 
‘John B. Smith’.
 
SELECT Bdate, Address
FROM EMPLOYEE
WHERE Fname = 'John' AND Minit = 'B' AND Lname = 'Smith';
 
 
 
Query 1. Retrieve the name and address of all employees who work for the 
‘Research’ department.
 
SELECT E.Fname, E.Lname, E.Address
FROM EMPLOYEE E
WHERE E.Dno IN (SELECT Dnumber FROM DEPARTMENT WHERE Dname = 'Research');
 
 
Query 2. For every project located in ‘Stafford’, list the project number, the 
controlling department number, and the department manager’s last name, 
address, and birth date.
 
SELECT P.Pnumber, P.Dnum, M.Lname, M.Address, M.Bdate
FROM PROJECT P
JOIN DEPARTMENT D ON P.Dnum = D.Dnumber
JOIN EMPLOYEE M ON D.Mgr_ssn = M.Ssn
WHERE P.Plocation = 'Stafford';
 
 
 
Query 6. Retrieve the names of employees who have no dependents
 
SELECT E.Fname, E.Lname
FROM EMPLOYEE E
WHERE NOT EXISTS (SELECT 1 FROM DEPENDENT D WHERE D.Essn = E.Ssn);
 
 
 
Query 7. List the names of managers who have at least one dependent
 
SELECT M.Fname, M.Lname
FROM EMPLOYEE M
WHERE EXISTS (SELECT 1 FROM DEPARTMENT D WHERE D.Mgr_ssn = M.Ssn)
  AND EXISTS (SELECT 1 FROM DEPENDENT D WHERE D.Essn = M.Ssn);
 
 
Query 8. For each employee, retrieve the employee’s first and last name and the 
first and last name of his or her immediate supervisor
 
SELECT E.Fname AS Employee_FirstName, E.Lname AS Employee_LastName,
            S.Fname AS Supervisor_FirstName, S.Lname AS Supervisor_LastName
FROM EMPLOYEE E
LEFT JOIN EMPLOYEE S ON E.Super_ssn = S.Ssn;
 
 
Queries 9 and 10. Select all EMPLOYEE Ssns (Q9) and all combinations of 
EMPLOYEE Ssn and DEPARTMENT Dname (Q10) in the database.
 
----->SELECT SSN FROM EMPLOYEE;
 
----->SELECT SSN, DNAME FROM EMPLOYEE, DEPARTMENT;
 
Query 11. Retrieve the salary of every employee (Q11) and all distinct salary 
values (Q11A)
 
--->SELECT ALL SALARY FROM EMPLOYEE;
--->SELECT DISTINCT SALARY FROM EMPLOYEE;
 
 
Query 12. Retrieve all employees whose address is in Houston, Texas.
 
SELECT FNAME, LNAME
FROM EMPLOYEE
WHERE ADDRESS LIKE '%Houston, Texas%';
 
 
 
Query 12A. Find all employees who were born during the 1950s.
 
SELECT Fname, Lname
FROM EMPLOYEE
WHERE Bdate LIKE ‘_ _ 7 _ _ _ _ _ _ _’;
 
 
Query 13. Show the resulting salaries if every employee working on the 
‘ProductX’ project is given a 10% raise
 
SELECT FNAME, LNAME, 1.1 * SALARY AS NEW_SALARY
FROM EMPLOYEE, WORKS_ON, PROJECT
WHERE SSN = ESSN
  AND PNO = PNUMBER
  AND PNAME = 'ProductX';
 
 
 
Query 14. Retrieve all employees in department 5 whose salary is between 
$30,000 and $40,000
 
SELECT FNAME, LNAME
FROM EMPLOYEE
WHERE DNO = 5
  AND SALARY BETWEEN 30000 AND 40000;
 
 
Query 15. Retrieve a list of employees and the projects they are working on, 
ordered by department and, within each department, ordered alphabetically by 
last name, then first name.
 
SELECT E.FNAME, E.LNAME, P.PNAME
FROM EMPLOYEE E
JOIN WORKS_ON W ON E.SSN = W.ESSN
JOIN PROJECT P ON W.PNO = P.PNUMBER
ORDER BY E.DNO, E.LNAME, E.FNAME;
 
 
 
Query 16. Retrieve the name of each employee who has a dependent with the 
same first name and is the same sex as the employee
 
SELECT E.FNAME, E.LNAME
FROM EMPLOYEE AS E
WHERE E.SSN IN (
    SELECT D.ESSN
    FROM DEPENDENT AS D
    WHERE E.FNAME = D.DEPENDENT_NAME AND D.SEX = E.SEX
);
 
 
 
Query 17. Retrieve the Social Security numbers of all employees who work on 
project numbers 1, 2, or 3
 
SELECT DISTINCT ESSN
FROM WORKS_ON
WHERE PNO IN (1, 2, 3);
 
 
Query 18. Retrieve the names of all employees who do not have supervisors.
 
SELECT FNAME, LNAME
FROM EMPLOYEE
WHERE SUPERSSN IS NULL;
 
 
 
Query 19. Find the sum of the salaries of all employees, the maximum salary, 
the minimum salary, and the average salary
 
SELECT SUM(Salary) AS Total_Salary,
       MAX(Salary) AS Max_Salary,
       MIN(Salary) AS Min_Salary,
       AVG(Salary) AS Avg_Salary
FROM Employee;
 
 
 
Query 20. Find the sum of the salaries of all employees of the ‘Research’ department, as well as the maximum salary, the minimum salary, and the average 
salary in this department.
 
SELECT SUM(Salary) AS Total_Salary_Research,
       MAX(Salary) AS Max_Salary_Research,
       MIN(Salary) AS Min_Salary_Research,
       AVG(Salary) AS Avg_Salary_Research
FROM Employee
WHERE Dno = 5; -- Assuming '5' represents the 'Research' department
 
 
 
 
Queries 21 and 22. Retrieve the total number of employees in the company 
(Q21) and the number of employees in the ‘Research’ department (Q22)
 
---> Total number of employees
SELECT COUNT(*) AS Total_Employees FROM Employee;
 
---> Number of employees in the 'Research' department
SELECT COUNT(*) AS Employees_In_Research
FROM Employee
WHERE Dno = 5; -- Assuming '5' represents the 'Research' department
 
 
 
Query 23. Count the number of distinct salary values in the database
 
SELECT COUNT(DISTINCT Salary) AS Distinct_Salary_Count
FROM Employee;
 
 
 
Query 24. For each department, retrieve the department number, the number 
of employees in the department, and their average salary.
 
SELECT Dno AS Department_Number,
       COUNT(*) AS Employee_Count,
       AVG(Salary) AS Avg_Salary
FROM Employee
GROUP BY Dno;
 
 
 
Query 25. For each project, retrieve the project number, the project name, and 
the number of employees who work on that project.
 
SELECT Pnumber AS Project_Number,
       Pname AS Project_Name,
       COUNT(*) AS Employee_Count
FROM Works_On
GROUP BY Pnumber, Pname;
 
 
 
Query 26. For each project on which more than two employees work, retrieve the 
project number, the project name, and the number of employees who work on 
the project.
 
SELECT Pnumber AS Project_Number,
       Pname AS Project_Name,
       COUNT(*) AS Employee_Count
FROM Works_On
GROUP BY Pnumber, Pname
HAVING COUNT(*) > 2;
 
 
 
Query 27. For each project, retrieve the project number, the project name, and 
the number of employees from department 5 who work on the project.
 
SELECT Pnumber AS Project_Number,
       Pname AS Project_Name,
       COUNT(*) AS Employees_From_Department_5
FROM Works_On
WHERE ESSN IN (SELECT SSN FROM Employee WHERE Dno = 5)
GROUP BY Pnumber, Pname;
 
 
 
Query 28. For each department that has more than five employees, retrieve the 
department number and the number of its employees who are making more 
than $40,000
 
 
SELECT Dno AS Department_Number,
       COUNT(*) AS High_Earning_Employees
FROM Employee
WHERE Salary > 40000
GROUP BY Dno
HAVING COUNT(*) > 5;


import mysql.connector as sql

# Establish a connection to the MySQL database
mydb = sql.connect(
    host="localhost",
    user="root",
    password="Nikkysahu123@",
    database="Student_societyODBC",
)

cursor = mydb.cursor()

cursor.execute("use student_society")

# Function to execute SQL queries
def execute_query(query):
    cursor.execute(query)
    rows = cursor.fetchall()

    for row in rows:
        print(row)
   
# Function to display menu options
def display_menu():
    print("\t\tMenu:")
    print("="*130)
    print("1. Retrieve names of students enrolled in any society.")

def main():
    while True:
        display_menu()
        choice = input("Enter your choice: ")

        if choice == '0':
            print("Exiting program.")
            break
        elif choice == '1':
            execute_query("""select distict S.StudentName
                    from STUDENT S
                    JOIN ENROLLMENT E ON S.RollNo = E.RollNo;
            """)

if __name__ == "__main__":
    main()












